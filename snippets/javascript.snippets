# cmt
snippet cmt
	/* ${1} */
# cmts
snippet cmts
	/*---
	 * ${1}
	 *---*/

# EventListener
snippet eventsubmit
	const formElem = document.querySelector('form');

	formElem.addEventListener('submit', evt => {
		evt.preventDefault();

		console.log(formElem.querySelector('input[name="field1"]'));
		console.log(formElem.querySelector('input[name="field2"]'));

		const formData = new FormData(formElem);

		console.log(formData.get('field1'));
		console.log(formData.get('field2'));
	});

# createElement
snippet createElement
	const createElement = (elementName, attributes) => {
		let element = document.createElement(elementName)
		let attributesArray = Object.entries(attributes)

		let attributesAsArray = Object.entries(attributes)

		attributesAsArray.forEach(([key, value]) => element.setAttribute(key, value))

		return element
	}
# Prototype
snippet proto
	${1:class_name}.prototype.${2:method_name} =
	function(${3:first_argument}) {
		${0:// body...}
	};
# Function
snippet fun
	function ${1:function_name}(${2:argument}) {
		${0:// body...}
	}
# Anonymous Function
snippet f
	function (${1}) {
		${0}
	}
# Immediate function
snippet (f
	(function (${1}) {
		${0}
	}(${2}));
# if
snippet if
	if (${1:true}) {
		${0}
	}
# if ... else
snippet ife
	if (${1:true}) {
		${2}
	} else {
		${0}
	}
snippet iife
	((win, doc) => {
		'use strict';
		${0}
	})(window, document);
# tertiary conditional
snippet ter
	${1:/* condition */} ? ${2:a} : ${0:b}
# switch
snippet switch
	switch (${1:expression}) {
		case '${3:case}':
			${4}
			break;
		${0}
		default:
			${2}
	}
# case
snippet case
	case '${1:case}':
		${2}
		break;
	${0}
# for (...) {...}
snippet for
	for (var ${2:i} = 0, l = ${1:arr}.length; $2 < l; $2 ++) {
		var ${3:v} = $1[$2];${0:}
	}
# for (...) {...} (Improved Native For-Loop)
snippet forr
	for (var ${2:i} = ${1:arr}.length - 1; $2 >= 0; $2 --) {
		var ${3:v} = $1[$2];${0:}
	}
# while (...) {...}
snippet wh
	while (${1:/* condition */}) {
		${0}
	}
# try
snippet try
	try {
		${1}
	} catch (${2:e}) {
		${0:/* handle error */}
	}
# do...while
snippet do
	do {
		${0}
	} while (${1:/* condition */});
# Object Method
snippet :f
	${1:method_name}: function (${2:attribute}) {
		${0}
	}${3:,}
# setTimeout function
snippet timeout
	setTimeout(function () {${0}}${2}, ${1:10});
# Get Elements
snippet get
	getElementsBy${1:TagName}('${2}')
# Get Element
snippet gett
	getElementBy${1:Id}('${2}')
# console.log (Firebug)
snippet cl
	console.log(${0});
# console.debug (Firebug)
snippet cd
	console.debug(${0});
# return
snippet ret
	return ${0:result}
# for (property in object ) { ... }
snippet fori
	for (var ${1:prop} in ${2:Things}) {
		${0:$2[$1]}
	}
# hasOwnProperty
snippet has
	hasOwnProperty(${0})
# docstring
snippet /**
	/**
	 * ${0:description}
	 *
	 */
snippet @par
	@param {${1:type}} ${2:name} ${0:description}
snippet @ret
	@return {${1:type}} ${0:description}
# JSON.parse
snippet jsonp
	JSON.parse(${0:jstr});
# JSON.stringify
snippet jsons
	JSON.stringify(${0:object});
# self-defining function
snippet sdf
	var ${1:function_name} = function (${2:argument}) {
		${3}

		$1 = function ($2) {
			${0}
		};
	};
# singleton
snippet sing
	function ${1:Singleton} (${2:argument}) {
		// the cached instance
		var instance;

		// rewrite the constructor
		$1 = function $1($2) {
			return instance;
		};

		// carry over the prototype properties
		$1.prototype = this;

		// the instance
		instance = new $1();

		// reset the constructor pointer
		instance.constructor = $1;

		${0}

		return instance;
	}
# Crockford's object function
snippet obj
	function object(o) {
		function F() {}
		F.prototype = o;
		return new F();
	}
# Define multiple properties
snippet props
	var ${1:my_object} = Object.defineProperties(
		${2:new Object()},
		{
			${3:property} : {
				get : function $1_$3_getter() {
					// getter code
				},
				set : function $1_$3_setter(value) {
					// setter code
				},
				value        : ${4:value},
				writeable    : ${5:boolean},
				enumerable   : ${6:boolean},
				configurable : ${0:boolean}
			}
		}
	);
# Define single property
snippet prop
	Object.defineProperty(
		${1:object},
		"${2:property}",
		{
			get : function $1_$2_getter() {
				// getter code
			},
			set : function $1_$2_setter(value) {
				// setter code
			},
			value        : ${3:value},
			writeable    : ${4:boolean},
			enumerable   : ${5:boolean},
			configurable : ${0:boolean}
		}
	);
#---------------
#--- ReactJS ---
#---------------
snippet react-root-pure
	const root = document.querySelector('#root');

	const e = React.createElement;

	function MyComponent() {
		return e(
			'div',
			{ id: 'elemento-pai', style: { width: '400px', margin: '0 auto' } },
			e(
				'h1',
				{ className: 'elemento-filho', style: { fontFamily: 'Arial', fontStyle: 'italic' } },
				'Alô mundo!!!'
			)
		);
	}

	ReactDOM.render(
		e(MyComponent),
		root
	)
snippet react-root-class
	const root = document.getElementById('root');

	const {Component} = React;

	class MyComponent extends Component {
		render() {
			return(
				<div id="elemento-pai" style={{ width: '400px', margin: '0 auto' }}>
					<h1 className="elemento-filho" style={{ fontFamily: 'Arial', fontStyle: 'italic' }}>Alô mundo!!!</h1>
				</div>
			)
		}
	}

	ReactDOM.render(
		<MyComponent />,
		root
	);
snippet react-root-function
	const root = document.getElementById('root');

	function MyComponent() {
		return(
			<div id="elemento-pai" style={{ width: '400px', margin: '0 auto' }}>
				<h1 className="elemento-filho" style={{ fontFamily: 'Arial', fontStyle: 'italic' }}>Alô mundo!!!</h1>
			</div>
		)
	}

	ReactDOM.render(
		<MyComponent />,
		root
	);
snippet rfProps
	const root = document.getElementById('root');

	let Ola = (props) => {
		return(
			<div>
				<p>Olá, {props.nome} {props.sobrenome}.</p>
			</div>
		)
	}

	ReactDOM.render(<Ola nome="Fulano" sobrenome="de Tal" />, root);
#---
snippet rForm
	class App extends React.Component {
		constructor() {
			super()

			this.state = {
				username: '',
				password: ''
			}

		}

		alterarUsername = e => {
			this.setState({username: e.target.value})
		}

		alterarPassword = e => {
			this.setState({password: e.target.value})
		}

		submeterForm = e => {
			console.log("Username: " + this.state.username)
			console.log("Password: " + this.state.password)
			e.preventDefault()
		}

		render() {
			return(
				<form onSubmit={this.submeterForm}>
					<input type="text" value={this.state.username} onChange={this.alterarUsername} placeholder="username" />
					<br />
					<input type="password" value={this.state.password} onChange={this.alterarPassword} placeholder="password" />
					<br />
					<input type="submit" value="Entrar" />
				</form>
			)
		}
	}

	ReactDOM.render(
		<App />,
		document.getElementById('root')
	)
#---
snippet rMap
	const root = document.getElementById('root');

	class App extends React.Component {
		render() {
			return(<div>
							<h2>Notícias</h2>
							<hr />
							{final}
						 </div>)
		}
	}

	class Noticia extends React.Component {
		constructor(props) {
			super(props)
		}

		render() {
			return(
				<div>
					<h3>{this.props.noticia.titulo}</h3>
					<p>{this.props.noticia.texto}</p>
					<small><i>{this.props.noticia.autor}</i></small>
				</div>
			)
		}
	}

	const noticias = [
		{
			titulo: "Notícia 1",
			texto: "Texto da notícia 1",
			autor: "Autor 1"
		},
		{
			titulo: "Notícia 2",
			texto: "Texto da notícia 2",
			autor: "Autor 2"
		},
		{
			titulo: "Notícia 3",
			texto: "Texto da notícia 3",
			autor: "Autor 3"
		}
	]

	let final = noticias.map(n => <Noticia noticia={n} />)

	ReactDOM.render(<App />, root);
#-----------------
#--- RequireJS ---
#-----------------
snippet bootjs
	requirejs.config({
		baseUrl: 'assets/js',
		paths: {
			// vendor
			'bootstrap': '../vendor/bootstrap/bootstrap.bundle.min',
			// js
			'main': 'main'
		}
	});
snippet requirejs
	requirejs (
		['${1:module}'],
		(${2:module_alias}) => {
			$0
		}
	);
snippet definejs
	define ([],
		() => {
			$0
		}
	);
