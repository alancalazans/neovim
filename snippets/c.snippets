# =============================
# mainc
# =============================
snippet mainc
	#include <stdio.h>

	int main(int argc, const char *argv[]) {
		${1}
		return 0;
	}
# =============================
# main-void
# =============================
snippet main-void
	#include <stdio.h>

	int main(void) {
		${1}
		return 0;
	}
# =============================
# main-param
# =============================
snippet main-param
	#include <errno.h>
	#include <math.h>
	#include <stdio.h>
	#include <stdlib.h>
	#include <string.h>

	/*
	* =========  FUNCTION  ========
	*         Name:  main
	*  Description:  main function
	* =============================
	*/
	int main ( int argc, char *argv[] ) {
		printf ("\nPrograma em execução:\n\t%s\n\n", argv[0]);

		return EXIT_SUCCESS;
	} // ----------  end of function main  ----------
# =============================
# include
# =============================
snippet include
	#include <${1}.h>
# =============================
# #ifndef ... #define ... #endif
# =============================
snippet Def
	#ifndef $1
	#define ${1:SYMBOL} ${2:value}
	#endif${3}
# =============================
# def
# =============================
snippet define
	#define
# =============================
# ifdef
# =============================
snippet ifdef
	#ifdef ${1:FOO}
		${2:#define }
	#endif
# =============================
# #if
# =============================
snippet #if
	#if ${1:FOO}
		${2}
	#endif
# =============================
# Header Include-Guard
# =============================
snippet once
	#ifndef ${1:`toupper(Filename('$1_H', 'UNTITLED_H'))`}

	#define $1

	${2}

	#endif /* end of include guard: $1 */
# =============================
# if
# =============================
snippet if
	if (${1:/* condition */}) {
		${2:/* code */}
	}
# =============================
# else
# =============================
snippet else
	else {
		${1}
	}
# =============================
# Ternary conditional
# =============================
snippet ternary
	${1:/* condition */} ? ${2:a} : ${3:b}
# =============================
# Do While Loop
# =============================
snippet do
	do {
		${2:/* code */}
	} while (${1:/* condition */});
# =============================
# While Loop
# =============================
snippet while
	while (${1:/* condition */}) {
		${2:/* code */}
	}
# =============================
# for
# =============================
snippet for
	for (${2:i} = 0; $2 < ${1:count}; $2${3:++}) {
		${4:/* code */}
	}
# =============================
# function
# =============================
snippet function
	${1:void} ${2:function_name}(${3})
	{
		${4:/* code */}
	}
# =============================
# Function Declaration
# =============================
snippet function-declariton
	${1:void} ${2:function_name}(${3});${4}
# =============================
# typedef
# =============================
snippet typedef
	typedef ${1:int} ${2:MyCustomType};${3}
# =============================
# struct
# =============================
snippet struct
	struct ${1:`Filename('$1_t', 'name')`} {
		${2:/* data */}
	}${3: /* optional variable list */};${4}
# =============================
# Typedef struct
# =============================
snippet typedef-struct
	typedef struct ${2:_$1 }{
		${3:/* data */}
	} ${1:`Filename('$1_t', 'name')`};
# =============================
# Typedef enum
# =============================
snippet typedef-enum
	typedef enum {
		${1:/* data */}
	} ${2:foo};
# =============================
# printf
# =============================
snippet printf
	printf("${1:%s}\n",${2});${3}
# =============================
# scanf
# =============================
snippet scanf
	scanf("${1:%c}",&${2});${3}
# =============================
# fprintf
# =============================
snippet fprint
	fprintf(${1:stderr}, "${2:%s}\n"${3});${4}
